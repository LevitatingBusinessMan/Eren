html
    head
        style
            include assets/default.css
            include assets/button.css
            include assets/image.css
            include assets/tooltip.css
        include assets/alerts.pug
        include assets/homefn.js.pug
    body
        h1#title Image
        
        include includes/eren_back.pug

        if logged_in
            include includes/dropdown.pug
            
            div#dropzone_background
                p DRAG IMAGE HERE
                div#dropzone(ondrop="dropHandler(event)" ondragenter="dragEnter(event)" ondragleave="dragLeave(event)" ondragover="event.preventDefault()")
                ul#files
            div#dropzone_upload(onclick="upload()")
                span UPLOAD
                include assets/arrow.svg.pug
            p OR
            button.btn.threeD(onclick="handleButtonClick()") Open explorer

            input#file_input(type="file" accept="image/*" onchange="handleFileUpload()" multiple hidden)
            <br>
            ul#resultsbox.hidden

        else
            include includes/login_window.pug    
            div#opener-container
                button#opener(onclick="activateLoginWindow(this)" class="btn") Login
                div#holes

        script.
            login_cb = location.reload.bind(location);
            const dropzone_bg = document.getElementById("dropzone_background");
            const dropzone = document.getElementById("dropzone");
            const files_list = document.getElementById("files");
            const file_input = document.getElementById("file_input");
            const results_list = document.getElementById("resultsbox");
            let files = {};

            function handleButtonClick() {
                file_input.click();
            }

            //Handle all files added through the explorer
            function handleFileUpload() {

                for (let i=0; i < file_input.files.length; i++)
                    fileHandler(file_input.files[i])

            }

            function fileHandler(file) {
                    
                    //File is already present in filelist
                    if (files[file.name])
                        return Alert("critical", "Duplicate filename!")


                    files[file.name] = file;
                    

                    if (!dropzone_bg.classList.contains("has_files"))
                        dropzone_bg.classList.add("has_files");
                    
                    const listItem = document.createElement("li");

                    listItem.innerHTML = `<span id="files--filename">${file.name}</span><span id="files--remove" onclick="removeFile('${file.name}', this)">x</span>`;

                    files_list.appendChild(listItem);
            }

            function removeFile(fileName, element) {

                delete files[fileName];
                element.parentNode.remove();

                if (files_list.children.length < 1 && dropzone_bg.classList.contains("has_files"))
                    dropzone_bg.classList.remove("has_files");
            }

            function dropHandler(e) {
                e.preventDefault();
                dropzone_bg.classList.remove("hover");

                if (e.dataTransfer.items)
                    // Use DataTransferItemList interface to access the file(s)
                    for (let i = 0; i < e.dataTransfer.items.length; i++)
                        if (e.dataTransfer.items[i].kind === "file") 
                            fileHandler(e.dataTransfer.items[i].getAsFile())
                
                else
                    // Use DataTransfer interface to access the file(s)
                    for (let i = 0; i < e.dataTransfer.files.length; i++)
                       fileHandler(e.dataTransfer.files[i].name)
            }

            function dragEnter(e) {
                dropzone_bg.classList.add("hover");
            }
            
            function dragLeave(e) {
                e.preventDefault();
                dropzone_bg.classList.remove("hover");
            }

            function upload() {
                const filesLength = Object.keys(files).length;

                Alert("info", `Uploading ${filesLength} file${filesLength > 1 ? "s" : ""}`)
                for (let fileName in files) {

                    const formData = new FormData();

                    formData.append("image", files[fileName]);

                    fetch("/s/image", {
                        method: "POST",
                        headers: {
                            "credentials": "include"
                        },
                        body: formData
                    }).then(response => {
                        if (response.status !== 200) {

                            Alert("critical","Something went wrong");

                            console.log(response)
                        }
                        else {
                            response.json()
                            .then(response => {
                                addResult(fileName, response.url)

                                //Reset page
                                files = {};
                                dropzone_bg.classList.remove("has_files");
                                files_list.innerHTML = "";
                            })
                        }
                    });

                }                

                
            }

            function addResult(name, src) {
                if (results_list.classList.contains("hidden"))
                    results_list.classList.remove("hidden")

                results_list.innerHTML +=
                    `<li class="result">
                        <img class="result__preview" src="${src}" />
                        <span class="result__name">${name}</span>
                        <span class="result__url tooltip" onclick="copy(this)" onmouseout="resetCopytoolkit(this)">
                            ${src}
                            <span class="tooltiptext left">Click to copy</span>
                        </span>
                    </li>`;
            }

            function copy (el) {
                document.execCommand("copy");
                document.getSelection().removeAllRanges();
                el.children[0].innerHTML = "Copied!"
            }

            function resetCopytoolkit(el) {
                el.children[0].innerHTML = "Click to copy"
            }
